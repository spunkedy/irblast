/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package co.withgod.irblaster;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


@Kroll.module(name="Irblaster", id="co.withgod.irblaster")
public class IrblasterModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "IrblastModule";
	
	@SuppressWarnings("unchecked")
	final private java.lang.reflect.Method sendIR;
	private Object irService;
	

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public IrblasterModule(){
		super();
		java.lang.reflect.Method toSet;
		irService = TiApplication.getInstance().getSystemService("irda");
    	irService.getClass();
    	Class irClass = irService.getClass();
    	Class params[] = new Class[1];
    	params[0] = String.class;
    	
    	try{
    		toSet = irClass.getMethod("write_irsend", params);
    	} catch (Exception e) {
			e.printStackTrace();
			toSet = null;
		}
    	sendIR = toSet;
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app){
		Log.d(TAG, "inside onAppCreate");

		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public void sendCode(final String codeToSend){
	
		Thread thread = new Thread(){
		    @Override
		    public void run() {
				try {
					sendIR.invoke(irService,hex2dec(codeToSend));
					sendIR.invoke(irService,hex2dec(codeToSend));
				} catch (Exception e) {
					e.printStackTrace();
				}
		    }
		};

		thread.start();
		for(int i=0;i<2;i++){
			try {
				sendIR.invoke(irService,hex2dec(codeToSend));
				Thread.sleep(2);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
    }
	
	//https://github.com/rngtng/IrDude
	protected String hex2dec(String irData) {
		List<String> list = new ArrayList<String>(Arrays.asList(irData
				.split(" ")));
		list.remove(0); // dummy
		int frequency = Integer.parseInt(list.remove(0), 16); // frequency
		list.remove(0); // seq1
		list.remove(0); // seq2

		for (int i = 0; i < list.size(); i++) {
			list.set(i, Integer.toString(Integer.parseInt(list.get(i), 16)));
		}

		frequency = (int) (1000000 / (frequency * 0.241246));
		list.add(0, Integer.toString(frequency));

		irData = "";
		for (String s : list) {
			irData += s + ",";
		}
		return irData;
	}
}
